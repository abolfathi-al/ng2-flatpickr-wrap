{"version":3,"names":["window","require","Ng2FlatpickrComponent","_this","this","_tabindex","onTouchedFn","defaultFlatpickrOptions","wrap","clickOpens","onChange","selectedDates","writeValue","placeholder","addClass","hideButton","propagateChange","_","Object","defineProperty","prototype","get","set","ti","Number","value","registerOnChange","fn","registerOnTouched","setDateFromInput","date","flatpickrElement","nativeElement","_flatpickr","setDate","setAltInputPlaceholder","altInput","setAttribute","ngAfterViewInit","config","assign","flatpickr","ngOnChanges","changes","hasOwnProperty","currentValue","onFocus","event","type","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ViewChild","static","Input","Ng2FlatpickrDirective","parent","ngControl","element","renderer","flatpickrOnChange","EventEmitter","flatpickrOnClose","flatpickrOnOpen","flatpickrOnReady","onClick","toggle","formDirective","getControl","flatpickrOptions","parentNode","flatpickrAltInput","ngOnDestroy","destroy","formControlListener","unsubscribe","undefined","ngOnInit","globalOnChange","globalOnClose","onClose","globalOnOpen","onOpen","globalOnReady","onReady","altFormat","getOption","altInputClass","allowInput","appendTo","dateFormat","defaultDate","disable","disableMobile","enable","enableTime","enableSeconds","hourIncrement","inline","locale","maxDate","minDate","minuteIncrement","mode","nextArrow","noCalendar","eventOnChange","bind","eventOnClose","eventOnOpen","eventOnReady","parseDate","prevArrow","shorthandCurrentMonth","time_24hr","utc","weekNumbers","keys","forEach","key","control","valueChanges","subscribe","Date","setValue","onlySelf","emitEvent","emitModelToViewChange","emitViewToModelChange","dateStr","instance","emit","option","defaultValue","localName","substring","toUpperCase","Directive","exportAs","ControlContainer","NgControl","ElementRef","Renderer2","flatpickrAltFormat","flatpickrAltInputClass","flatpickrAllowInput","flatpickrAppendTo","flatpickrClickOpens","flatpickrDateFormat","flatpickrDefaultDate","flatpickrDisable","flatpickrDisableMobile","flatpickrEnable","flatpickrEnableTime","flatpickrEnableSeconds","flatpickrHourIncrement","flatpickrInline","flatpickrLocale","flatpickrMaxDate","flatpickrMinDate","flatpickrMinuteIncrement","flatpickrMode","flatpickrNextArrow","flatpickrNoCalendar","flatpickrParseDate","flatpickrPrevArrow","flatpickrShorthandCurrentMonth","flatpickrStatic","flatpickrTime_24hr","flatpickrUtc","flatpickrWeekNumbers","flatpickrWrap","Output","HostListener","Ng2FlatpickrModule","NgModule","imports","CommonModule","declarations","exports"],"sources":["../../src/ng2-flatpickr.component.ts","../../src/ng2-flatpickr.directive.ts","../../src/ng2-flatpickr.module.ts"],"sourcesContent":["import { Component, ViewChild, AfterViewInit, forwardRef, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FlatpickrOptions } from './flatpickr-options.interface';\n\ndeclare var require: any;\n\nif (typeof window !== 'undefined') {\n\trequire('flatpickr-wrap');\n}\n\n@Component({\n\tselector: 'ng2-flatpickr',\n\ttemplate: `\n\t\t<div class=\"ng2-flatpickr-input-container\" #flatpickr>\n\t\t\t<input *ngIf=\"!hideButton\" class=\"ng2-flatpickr-input {{ addClass }}\" [placeholder]=\"placeholder\" [tabindex]=\"tabindex\" type=\"text\" (focus)=\"onFocus($event)\" data-input>\n\t\t\t<ng-content></ng-content>\n\t\t</div>\n\t\t`,\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: forwardRef(() => Ng2FlatpickrComponent),\n\t\t\tmulti: true\n\t\t}\n\t]\n})\nexport class Ng2FlatpickrComponent implements AfterViewInit, ControlValueAccessor, OnChanges {\n\n\tpublic flatpickr: Object;\n\tprivate _tabindex = 0;\n\tonTouchedFn: Function = () => { };\n\n\tprivate defaultFlatpickrOptions: FlatpickrOptions = {\n\t\twrap: true,\n\t\tclickOpens: true,\n\t\tonChange: (selectedDates: any) => { this.writeValue(selectedDates); }\n\t};\n\n\t@ViewChild('flatpickr', {\n\t\tstatic: true\n\t})\n\tflatpickrElement: any;\n\n\t@Input()\n\tconfig: FlatpickrOptions;\n\n\t@Input()\n\tplaceholder: string = \"\";\n\n\t@Input()\n\taddClass: string = \"\";\n\n\t@Input()\n\tsetDate: string | Date;\n\n\t@Input()\n\tget tabindex() { return this._tabindex; }\n\tset tabindex(ti: number) { this._tabindex = Number(ti); }\n\n\t@Input()\n\thideButton = false;\n\n\t///////////////////////////////////\n\n\twriteValue(value: any) {\n\t\tthis.propagateChange(value);\n\t}\n\n\tregisterOnChange(fn: any) {\n\t\tthis.propagateChange = fn;\n\t}\n\n\tregisterOnTouched(fn: any): void {\n\t\tthis.onTouchedFn = fn;\n\t}\n\n\tpropagateChange = (_: any) => { };\n\n\t///////////////////////////////////\n\n\tsetDateFromInput(date: any) {\n\t\tthis.flatpickrElement.nativeElement._flatpickr.setDate(date, true);\n\t}\n\n\tsetAltInputPlaceholder(placeholder: string) {\n\t\tthis.flatpickrElement.nativeElement._flatpickr.altInput.setAttribute('placeholder', placeholder);\n\t}\n\n\tngAfterViewInit() {\n\t\tif (this.config) {\n\t\t\tObject.assign(this.defaultFlatpickrOptions, this.config);\n\t\t}\n\t\tif (this.flatpickrElement.nativeElement.flatpickr) {\n\t\t\tthis.flatpickr = this.flatpickrElement.nativeElement.flatpickr(this.defaultFlatpickrOptions);\n\t\t}\n\t\tif (this.setDate) {\n\t\t\tthis.setDateFromInput(this.setDate);\n\t\t}\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tif (this.flatpickrElement.nativeElement\n\t\t\t&& this.flatpickrElement.nativeElement._flatpickr) {\n\n\t\t\tif (changes.hasOwnProperty('setDate')\n\t\t\t\t&& changes['setDate'].currentValue) {\n\t\t\t\tthis.setDateFromInput(changes['setDate'].currentValue);\n\t\t\t}\n\n\t\t\tif (this.config.altInput\n\t\t\t\t&& changes.hasOwnProperty('placeholder')\n\t\t\t\t&& changes['placeholder'].currentValue) {\n\t\t\t\tthis.setAltInputPlaceholder(changes['placeholder'].currentValue);\n\t\t\t}\n\t\t}\n\t}\n\n\tonFocus(event: any) {\n\t\tthis.onTouchedFn();\n\t}\n}\n","import {\n\tAfterViewInit, Directive, ElementRef, EventEmitter, HostListener, Input,\n\tOnDestroy, OnInit, Output, Renderer2, SimpleChanges, OnChanges\n} from '@angular/core';\nimport { ControlContainer, FormControl, NgControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FlatpickrEvent } from './flatpickr-event.interface';\nimport { FlatpickrInstance } from './flatpickr-instance';\nimport { FlatpickrOptions } from './flatpickr-options.interface';\n\n@Directive({ selector: '[flatpickr]', exportAs: 'ng2-flatpickr' })\nexport class Ng2FlatpickrDirective implements AfterViewInit, OnDestroy, OnInit, OnChanges {\n\t/**\n\t * The flatpickr configuration as a single object of values.\n\t *\n\t * See https://chmln.github.io/flatpickr/options/ for full list.\n\t */\n\t@Input('flatpickr') public flatpickrOptions: FlatpickrOptions;\n\n\t/**\n\t * Placeholder for input field.\n\t *\n\t * Default:  null\n\t */\n\t@Input('placeholder') public placeholder: string;\n\n\t/**\n\t * Exactly the same as date format, but for the altInput field.\n\t *\n\t * Default:  \"F j, Y\"\n\t */\n\t@Input('altFormat') public flatpickrAltFormat: string;\n\n\t/**\n\t * Show the user a readable date (as per altFormat), but return something\n\t * totally different to the server.\n\t *\n\t * Default:  false\n\t */\n\t@Input('altInput') public flatpickrAltInput: boolean;\n\n\t/**\n\t * This class will be added to the input element created by the altInput\n\t * option.\n\t *\n\t * Default:  \"\"\n\t */\n\t@Input('altInputClass') public flatpickrAltInputClass: string;\n\n\t/**\n\t * Allows the user to enter a date directly input the input field. By\n\t * default, direct entry is disabled.\n\t *\n\t * Default:  false\n\t */\n\t@Input('allowInput') public flatpickrAllowInput: boolean;\n\n\t/**\n\t * Instead of body, appends the calendar to the specified node instead.\n\t *\n\t * Default:  null\n\t */\n\t@Input('appendTo') public flatpickrAppendTo: any; // HTMLElement\n\n\t/**\n\t * Whether clicking on the input should open the picker.\n\t * You could disable this if you wish to open the calendar manually\n\t * with.open().\n\t *\n\t * Default:  true\n\t */\n\t@Input('clickOpens') public flatpickrClickOpens: boolean;\n\n\t/**\n\t * A string of characters which are used to define how the date will be\n\t * displayed in the input box.\n\t * See https://chmln.github.io/flatpickr/formatting/ for supported tokens.\n\t *\n\t * Default:  \"Y-m-d\"\n\t */\n\t@Input('dateFormat') public flatpickrDateFormat: string;\n\n\t/**\n\t * Sets the initial selected date(s).\n\t *\n\t * If you're using {mode: \"multiple\"} or a range calendar supply an Array of\n\t * Date objects or an Array of date strings which follow your dateFormat.\n\t *\n\t * Otherwise, you can supply a single Date object or a date string.\n\t *\n\t * Default:  null\n\t */\n\t@Input('defaultDate') public flatpickrDefaultDate: string | Date;\n\n\t/**\n\t * Disable an array of specific dates, date ranges, or functions to disable\n\t * dates. See https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\n\t *\n\t * Default:  []\n\t */\n\t@Input('disable') public flatpickrDisable: string[] | Date[];\n\n\t/**\n\t * Set disableMobile to true to always use the non-native picker. By\n\t * default, Flatpickr utilizes native datetime widgets unless certain\n\t * options (e.g. disable) are used.\n\t *\n\t * Default:  false\n\t */\n\t@Input('disableMobile') public flatpickrDisableMobile: boolean;\n\n\t/**\n\t * Enable an array of specific dates, date ranges, or functions to enable\n\t * dates. See https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\n\t *\n\t * Default:  []\n\t */\n\t@Input('enable') public flatpickrEnable: string[] | Date[];\n\n\t/**\n\t * Enables time picker.\n\t *\n\t * Default:  false\n\t */\n\t@Input('enableTime') public flatpickrEnableTime: boolean;\n\n\t/**\n\t * Enables seconds in the time picker.\n\t *\n\t * Default:  false\n\t */\n\t@Input('enableSeconds') public flatpickrEnableSeconds: boolean;\n\n\t/**\n\t * Adjusts the step for the hour input (incl. scrolling).\n\t *\n\t * Default:  1\n\t */\n\t@Input('hourIncrement') public flatpickrHourIncrement: number;\n\n\t/**\n\t * Displays the calendar inline.\n\t *\n\t * Default:  false\n\t */\n\t@Input('inline') public flatpickrInline: boolean;\n\n\t/**\n\t * Use a specific locale for the flatpickr instance.\n\t *\n\t * Default:  null\n\t */\n\t@Input('locale') public flatpickrLocale: Object;\n\n\t/**\n\t * The maximum date that a user can pick to (inclusive).\n\t *\n\t * Default:  null\n\t */\n\t@Input('maxDate') public flatpickrMaxDate: string | Date;\n\n\t/**\n\t * The minimum date that a user can start picking from (inclusive).\n\t *\n\t * Default:  null\n\t */\n\t@Input('minDate') public flatpickrMinDate: string | Date;\n\n\t/**\n\t * Adjusts the step for the minute input (incl. scrolling).\n\t *\n\t * Default:  5\n\t */\n\t@Input('minuteIncrement') public flatpickrMinuteIncrement: number;\n\n\t/**\n\t * \"single\", \"multiple\", or \"range\"\n\t *\n\t * Default:  \"single\"\n\t */\n\t@Input('mode') public flatpickrMode: string;\n\n\t/**\n\t * HTML for the arrow icon, used to switch months.\n\t *\n\t * Default:  \">\"\n\t */\n\t@Input('nextArrow') public flatpickrNextArrow: string;\n\n\t/**\n\t * Hides the day selection in calendar. Use it along with enableTime to\n\t * create a time picker.\n\t *\n\t * Default:  false\n\t */\n\t@Input('noCalendar') public flatpickrNoCalendar: boolean;\n\n\t/**\n\t * Function that expects a date string and must return a Date object.\n\t *\n\t * Default:  false\n\t */\n\t@Input('parseDate') public flatpickrParseDate: Function;\n\n\t/**\n\t * HTML for the left arrow icon.\n\t *\n\t * Default:  \"<\"\n\t */\n\t@Input('prevArrow') public flatpickrPrevArrow: string;\n\n\t/**\n\t * Show the month using the shorthand version (ie, Sep instead of September).\n\t *\n\t * Default:  false\n\t */\n\t@Input('shorthandCurrentMonth') public flatpickrShorthandCurrentMonth: boolean;\n\n\t/**\n\t * Position the calendar inside the wrapper and next to the input element\n\t * (Leave false unless you know what you're doing).\n\t *\n\t * Default:  false\n\t */\n\t@Input('static') public flatpickrStatic: boolean;\n\n\t/**\n\t * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n\t *\n\t * Default:  false\n\t */\n\t@Input('time_24hr') public flatpickrTime_24hr: boolean;\n\n\t@Input('utc') public flatpickrUtc: boolean;\n\n\t/**\n\t * Enables display of week numbers in calendar.\n\t *\n\t * Default:  false\n\t */\n\t@Input('weekNumbers') public flatpickrWeekNumbers: boolean;\n\n\t/**\n\t * Custom elements and input groups.\n\t *\n\t * Default:  false\n\t */\n\t@Input('wrap') public flatpickrWrap: boolean;\n\n\t/**\n\t * onChange gets triggered when the user selects a date, or changes the time on a selected date.\n\t *\n\t * Default:  null\n\t */\n\t@Output('onChange') public flatpickrOnChange: EventEmitter<FlatpickrEvent> = new EventEmitter();\n\n\t/**\n\t * onClose gets triggered when the calendar is closed.\n\t *\n\t * Default:  null\n\t */\n\t@Output('onClose') public flatpickrOnClose: EventEmitter<FlatpickrEvent> = new EventEmitter();\n\n\t/**\n\t * onOpen gets triggered when the calendar is opened.\n\t *\n\t * Default:  null\n\t */\n\t@Output('onOpen') public flatpickrOnOpen: EventEmitter<FlatpickrEvent> = new EventEmitter();\n\n\t/**\n\t * onReady gets triggered once the calendar is in a ready state.\n\t *\n\t * Default:  null\n\t */\n\t@Output('onReady') public flatpickrOnReady: EventEmitter<FlatpickrEvent> = new EventEmitter();\n\n\t/** Allow double-clicking on the control to open/close it. */\n\t@HostListener('dblclick')\n\tpublic onClick() {\n\t\tthis.flatpickr.toggle();\n\t}\n\n\tprotected globalOnChange: Function;\n\tprotected globalOnClose: Function;\n\tprotected globalOnOpen: Function;\n\tprotected globalOnReady: Function;\n\n\tprotected flatpickr: FlatpickrInstance;\n\tprotected formControlListener: Subscription;\n\n\t/** Allow access properties using index notation */\n\t[key: string]: any;\n\n\tconstructor(\n\t\tprotected parent: ControlContainer,\n\t\tprotected ngControl: NgControl,\n\t\tprotected element: ElementRef,\n\t\tprotected renderer: Renderer2\n\t) { }\n\n\tget control(): FormControl {\n\t\treturn this.parent ? this.parent.formDirective.getControl(this.ngControl) : null;\n\t}\n\n\tngAfterViewInit() {\n\t\t/** We cannot initialize the flatpickr instance in ngOnInit(); it will\n\t\t\trandomize the date when the form control initializes. */\n\t\tlet nativeElement = this.element.nativeElement;\n\n\t\tif (typeof nativeElement === 'undefined' || nativeElement === null) {\n\t\t\tthrow 'Error: invalid input element specified';\n\t\t}\n\n\t\tif (this.flatpickrOptions.wrap) {\n\t\t\tthis.renderer.setAttribute(this.element.nativeElement, 'data-input', '');\n\t\t\tnativeElement = nativeElement.parentNode;\n\t\t}\n\n\t\tthis.flatpickr = <FlatpickrInstance>nativeElement.flatpickr(this.flatpickrOptions);\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tif (this.flatpickr\n\t\t\t&& this.flatpickrAltInput\n\t\t\t&& changes.hasOwnProperty('placeholder')\n\t\t\t&& changes['placeholder'].currentValue) {\n\t\t\tthis.flatpickr.altInput.setAttribute('placeholder', changes['placeholder'].currentValue);\n\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tif (this.flatpickr) {\n\t\t\tthis.flatpickr.destroy();\n\t\t}\n\n\t\tif (this.formControlListener) {\n\t\t\tthis.formControlListener.unsubscribe();\n\t\t\tthis.formControlListener = undefined;\n\t\t}\n\n\t\tthis.flatpickrOnChange = undefined;\n\t\tthis.flatpickrOnClose = undefined;\n\t\tthis.flatpickrOnOpen = undefined;\n\t\tthis.flatpickrOnReady = undefined;\n\t}\n\n\tngOnInit() {\n\t\tthis.globalOnChange = this.flatpickrOptions.onChange;\n\t\tthis.globalOnClose = this.flatpickrOptions.onClose;\n\t\tthis.globalOnOpen = this.flatpickrOptions.onOpen;\n\t\tthis.globalOnReady = this.flatpickrOptions.onReady;\n\n\t\tthis.flatpickrOptions = {\n\t\t\taltFormat: this.getOption('altFormat'),\n\t\t\taltInput: this.getOption('altInput'),\n\t\t\taltInputClass: this.getOption('altInputClass'),\n\t\t\tallowInput: this.getOption('allowInput'),\n\t\t\tappendTo: this.getOption('appendTo'),\n\t\t\tclickOpens: this.getOption('clickOpens', true),\n\t\t\tdateFormat: this.getOption('dateFormat'),\n\t\t\tdefaultDate: this.getOption('defaultDate'),\n\t\t\tdisable: this.getOption('disable'),\n\t\t\tdisableMobile: this.getOption('disableMobile'),\n\t\t\tenable: this.getOption('enable'),\n\t\t\tenableTime: this.getOption('enableTime'),\n\t\t\tenableSeconds: this.getOption('enableSeconds'),\n\t\t\thourIncrement: this.getOption('hourIncrement'),\n\t\t\tinline: this.getOption('inline'),\n\t\t\tlocale: this.getOption('locale'),\n\t\t\tmaxDate: this.getOption('maxDate'),\n\t\t\tminDate: this.getOption('minDate'),\n\t\t\tminuteIncrement: this.getOption('minuteIncrement'),\n\t\t\tmode: this.getOption('mode'),\n\t\t\tnextArrow: this.getOption('nextArrow'),\n\t\t\tnoCalendar: this.getOption('noCalendar'),\n\t\t\tonChange: this.eventOnChange.bind(this),\n\t\t\tonClose: this.eventOnClose.bind(this),\n\t\t\tonOpen: this.eventOnOpen.bind(this),\n\t\t\tonReady: this.eventOnReady.bind(this),\n\t\t\tparseDate: this.getOption('parseDate'),\n\t\t\tprevArrow: this.getOption('prevArrow'),\n\t\t\tshorthandCurrentMonth: this.getOption('shorthandCurrentMonth'),\n\t\t\tstatic: this.getOption('static'),\n\t\t\ttime_24hr: this.getOption('time_24hr'),\n\t\t\tutc: this.getOption('utc'),\n\t\t\tweekNumbers: this.getOption('weekNumbers'),\n\t\t\twrap: this.getOption('wrap', true),\n\t\t};\n\n\t\t// Remove unset properties\n\t\tObject.keys(this.flatpickrOptions).forEach((key: string) => {\n\t\t\t(this.flatpickrOptions[key] === undefined) &&\n\t\t\t\tdelete this.flatpickrOptions[key];\n\t\t});\n\n\t\tif (this.control) {\n\t\t\tthis.formControlListener = this.control.valueChanges\n\t\t\t\t.subscribe((value: any) => {\n\t\t\t\t\tif (!(value instanceof Date)) {\n\t\t\t\t\t\t// Quietly update the value of the form control to be a\n\t\t\t\t\t\t// Date object. This avoids any external subscribers\n\t\t\t\t\t\t// from being notified a second time (once for the user\n\t\t\t\t\t\t// initiated event, and once for our conversion to\n\t\t\t\t\t\t// Date()).\n\t\t\t\t\t\tthis.control.setValue(new Date('' + value), {\n\t\t\t\t\t\t\tonlySelf: true,\n\t\t\t\t\t\t\temitEvent: false,\n\t\t\t\t\t\t\temitModelToViewChange: false,\n\t\t\t\t\t\t\temitViewToModelChange: false\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Fire off the event emitter for the directive element, and also for the\n\t * global onChange callback, if defined.\n\t */\n\tprotected eventOnChange(selectedDates: Date[], dateStr: string, instance: Object): void {\n\t\tlet event: FlatpickrEvent = {\n\t\t\tselectedDates: selectedDates,\n\t\t\tdateStr: dateStr,\n\t\t\tinstance: instance\n\t\t};\n\t\tif (this.flatpickrOnChange) {\n\t\t\tthis.flatpickrOnChange.emit(event);\n\t\t}\n\t\tif (this.globalOnChange) {\n\t\t\tthis.globalOnChange(event);\n\t\t}\n\t}\n\n\t/**\n\t * Fire off the event emitter for the directive element, and also for the\n\t * global onClose callback, if defined.\n\t */\n\tprotected eventOnClose(selectedDates: Date[], dateStr: string, instance: Object): void {\n\t\tlet event: FlatpickrEvent = {\n\t\t\tselectedDates: selectedDates,\n\t\t\tdateStr: dateStr,\n\t\t\tinstance: instance\n\t\t};\n\t\tif (this.flatpickrOnClose) {\n\t\t\tthis.flatpickrOnClose.emit(event);\n\t\t}\n\t\tif (this.globalOnClose) {\n\t\t\tthis.globalOnClose(event);\n\t\t}\n\t}\n\n\t/**\n\t * Fire off the event emitter for the directive element, and also for the\n\t * global onOpen callback, if defined.\n\t */\n\tprotected eventOnOpen(selectedDates: Date[], dateStr: string, instance: Object): void {\n\t\tlet event: FlatpickrEvent = {\n\t\t\tselectedDates: selectedDates,\n\t\t\tdateStr: dateStr,\n\t\t\tinstance: instance\n\t\t};\n\t\tif (this.flatpickrOnOpen) {\n\t\t\tthis.flatpickrOnOpen.emit(event);\n\t\t}\n\t\tif (this.globalOnOpen) {\n\t\t\tthis.globalOnOpen(event);\n\t\t}\n\t}\n\n\t/**\n\t * Fire off the event emitter for the directive element, and also for the\n\t * global onReady callback, if defined.\n\t */\n\tprotected eventOnReady(selectedDates: Date[], dateStr: string, instance: Object): void {\n\t\tlet event: FlatpickrEvent = {\n\t\t\tselectedDates: selectedDates,\n\t\t\tdateStr: dateStr,\n\t\t\tinstance: instance\n\t\t};\n\t\tif (this.flatpickrOnReady) {\n\t\t\tthis.flatpickrOnReady.emit(event);\n\t\t}\n\t\tif (this.globalOnReady) {\n\t\t\tthis.globalOnReady(event);\n\t\t}\n\t}\n\n\t/**\n\t * Return the configuration value for option {option}, or {defaultValue} if it\n\t * doesn't exist.\n\t */\n\tprotected getOption(option: string, defaultValue?: any): any {\n\t\tlet localName = 'flatpickr' + option.substring(0, 1).toUpperCase()\n\t\t\t+ option.substring(1);\n\n\t\tif (typeof this[localName] !== 'undefined') {\n\t\t\treturn this[localName];\n\t\t} else if (typeof this.flatpickrOptions[option] !== 'undefined') {\n\t\t\treturn this.flatpickrOptions[option];\n\t\t} else {\n\t\t\treturn defaultValue;\n\t\t}\n\t}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Ng2FlatpickrComponent } from './ng2-flatpickr.component';\nimport { Ng2FlatpickrDirective } from './ng2-flatpickr.directive';\nimport 'flatpickr-wrap';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [\n        Ng2FlatpickrComponent,\n        Ng2FlatpickrDirective\n    ],\n    exports: [\n        Ng2FlatpickrComponent,\n        Ng2FlatpickrDirective\n    ]\n})\nexport class Ng2FlatpickrModule {\n}\n"],"mappings":"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"}